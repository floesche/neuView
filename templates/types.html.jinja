{% extends "base.html.jinja" %}

{% block title %}{{ config.html.title_prefix }} - Types List{% endblock %}

{% block header %}
{# Include the standard header navigation #}
{% include "sections/header.html.jinja" %}

{# Types-specific title section #}
<div class="header-title">
    <div class="title-container row">
        <div class="col-md-12">
            <h1 id="top">
                Neuron Type Index
                <span class="counter">{{ total_types }}</span> type{{ 's' if total_types > 1 }}
            </h1>
        </div>
    </div>
</div>
{% endblock %}

{% block content %}

<div class="index-container">
    <form id="filter-form">
    <div class="filter-controls">
        <div class="row middle-xs">

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="roi-filter" class="filter-label">ROI (brain region):</label>
                <select id="roi-filter" class="filter-dropdown">
                    <option value="all">Any ROI</option>
                    {% for roi in filter_options.rois %}
                    <option value="{{ roi }}">{{ roi }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="nt-filter" class="filter-label">Neurotransmitter:</label>
                <select id="nt-filter" class="filter-dropdown">
                    <option value="all">Any NT</option>
                    {% for nt in filter_options.neurotransmitters %}
                    <option value="{{ nt }}">{{ nt }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="dimorphism-filter" class="filter-label">Dimorphism:</label>
                <select id="dimorphism-filter" class="filter-dropdown">
                    <option value="all">Any</option>
                    {% for dimorphism in filter_options.dimorphisms %}
                    <option value="{{ dimorphism }}">{{ dimorphism }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="col-xs-9 col-sm-8 col-md-5">
                <label for="name-filter" class="filter-label">Filter by name and synonyms:</label>
                <div class="filter-input-container">
                    <input type="text" id="name-filter" class="filter-input" placeholder="Enter neuron type name..." />
                </div>
            </div>

            <div class="col-xs-3 col-sm-4 col-md-1">
                <input type="reset" id="reset-filters" class="pm-btn-secondary" value="X" title="Reset all filters">
            </div>
        </div>
        <div class="row middle-xs">

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="soma-filter" class="filter-label">Soma Side:</label>
                <select id="soma-filter" class="filter-dropdown">
                    <option value="all">Any</option>
                    <option value="undefined">Undefined</option>
                    <option value="right">only Right</option>
                    <option value="left">only Left</option>
                    <option value="middle">only Middle</option>
                </select>
            </div>

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="superclass-filter" class="filter-label">Superclass:</label>
                <select id="superclass-filter" class="filter-dropdown">
                    <option value="all">Any Superclass</option>
                    {% for superclass in filter_options.superclasses %}
                    <option value="{{ superclass }}">{{ superclass }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="class-filter" class="filter-label">Class:</label>
                <select id="class-filter" class="filter-dropdown">
                    <option value="all">Any Class</option>
                    {% for cell_class in filter_options.classes %}
                    <option value="{{ cell_class }}">{{ cell_class }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="subclass-filter" class="filter-label">Subclass:</label>
                <select id="subclass-filter" class="filter-dropdown">
                    <option value="all">Any Subclass</option>
                    {% for subclass in filter_options.subclasses %}
                    <option value="{{ subclass }}">{{ subclass }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="region-filter" class="filter-label">Region:</label>
                <select id="region-filter" class="filter-dropdown">
                    <option value="all">Any Region</option>
                    {% for region in filter_options.regions %}
                    <option value="{{ region }}">{{ region }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="cell-count-filter" class="filter-label">Cell Count:</label>
                <select id="cell-count-filter" class="filter-dropdown">
                    <option value="all">Any Number</option>
                    {% for range in filter_options.cell_count_ranges %}
                    <option value="{{ range.value }}">{{ range.label }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="soma-neuromere-filter" class="filter-label">Soma Neuromere:</label>
                <select id="soma-neuromere-filter" class="filter-dropdown">
                    <option value="all">Any Neuromere</option>
                    {% for soma_neuromere in filter_options.soma_neuromeres %}
                    <option value="{{ soma_neuromere }}">{{ soma_neuromere }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="col-xs-6 col-sm-2 col-md-2">
                <label for="truman-hl-filter" class="filter-label">Truman hemilineage:</label>
                <select id="truman-hl-filter" class="filter-dropdown">
                    <option value="all">Any Truman HL</option>
                    {% if filter_options.truman_hls %}
                        {% for truman_hl in filter_options.truman_hls %}
                        <option value="{{ truman_hl }}">{{ truman_hl }}</option>
                        {% endfor %}
                    {% endif %}
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-offset-6col-xs-6 col-sm-offset-9 col-sm-3 col-md-offset-8 col-md-4">
                <span id="result-count" class="result-count"></span>
            </div>
        </div>
    </div>
    </form>

    <div id="no-results-message" class="no-results-message" style="display: none">
        <div class="no-results-content">
            <h3>No neuron types found</h3>
            <p>
                No neuron types match the current filter criteria. Try selecting a different filter or clearing the
                search.
            </p>
        </div>
    </div>

    {# -- Content Area Loading Spinner -- #}
    <div id="content-spinner" class="content-spinner" style="display: none">
        <div class="spinner"></div>
        <div class="spinner-text">Loading neuron types...</div>
    </div>

    <div id="filtered-results-container"></div>

    {# -- Hidden container to store original cards structure -- #}
    <div id="original-cards-container" style="display: none">

        {% for neuron in neuron_types %}
        <div
            class="neuron-card-wrapper col-xs-12 col-sm-6 col-md-4 col-lg-3"
            data-region="{% if neuron.parent_rois %}{{ neuron.parent_rois|join(',') }}{% endif %}"
            data-rois="{% if neuron.roi_summary %}{{ neuron.roi_summary|map(attribute='name')|join(',') }}{% endif %}"
            data-parent-roi="{% if neuron.parent_rois %}{{ neuron.parent_rois|join(',') }}{% endif %}"
                data-nt="{{ neuron.consensus_nt if neuron.consensus_nt else (neuron.celltype_predicted_nt if neuron.celltype_predicted_nt else "") }}"
                data-class="{{ neuron.cell_class if neuron.cell_class else "" }}"
                data-subclass="{{ neuron.cell_subclass if neuron.cell_subclass else "" }}"
                data-superclass="{{ neuron.cell_superclass if neuron.cell_superclass else "" }}"
                data-cell-count="{{ neuron.total_count if neuron.total_count else 0 }}"
                data-left-count="{{ neuron.left_count if neuron.left_count else 0 }}"
                data-right-count="{{ neuron.right_count if neuron.right_count else 0 }}"
                data-middle-count="{{ neuron.middle_count if neuron.middle_count else 0 }}"
                data-undefined-count="{{ neuron.undefined_count if neuron.undefined_count else 0 }}"
                data-dimorphism="{{ neuron.dimorphism if neuron.dimorphism else "" }}"
                data-soma-neuromere="{{ neuron.soma_neuromere if neuron.soma_neuromere else "" }}"
                data-truman-hl="{{ neuron.truman_hl if neuron.truman_hl else "" }}"
                data-synonyms="{{ neuron.synonyms if neuron.synonyms else "" }}"
                data-flywire-types="{{ neuron.flywire_types if neuron.flywire_types else "" }}"
                data-processed-synonyms="{% if neuron.processed_synonyms and neuron.processed_synonyms|length > 0 %}{{ neuron.processed_synonyms.keys() | list | join(',') }}{% endif %}"
                data-processed-flywire-types="{% if neuron.processed_flywire_types and neuron.processed_flywire_types|length > 0 %}{% set displayable_types = [] %}{% for flywire_name, flywire_info in neuron.processed_flywire_types.items() %}{% if flywire_info.is_different %}{{ displayable_types.append(flywire_name) or '' }}{% endif %}{% endfor %}{{ displayable_types | join(',') }}{% endif %}"
            >
                <div class="neuron-card">
                    <div class="card-header">
                        {% if neuron.combined_url or neuron.both_url %}
                        <a
                            href="{{ neuron.combined_url or neuron.both_url }}"
                            class="neuron-name-link"
                            title="View all {{ neuron.name }} ({{ neuron.total_count }} cell {%- if neuron.total_count > 0 -%} s {%- endif -%})"
                            >{{ neuron.name | truncate_neuron_name | safe }}</a
                        >
                        {% else %}
                        <span
                            class="neuron-name"
                            title="{{ neuron.name }} has {{ neuron.total_count }} cells. Click on the soma side indicator to see more details."
                            >{{ neuron.name | truncate_neuron_name | safe }}</span
                        >
                        {% endif %}

                        <div class="soma-indicators">
                            {% if neuron.has_left or neuron.has_right or neuron.has_middle %}
                            <span class="soma-label">(</span>
                            {% if neuron.has_right %}
                            <a
                                href="{{ neuron.right_url }}"
                                class="soma-link right"
                                title="View {{ neuron.name }} right side ({{ neuron.right_count }} {% if neuron.right_count == 1 %}cell{% else %}cells{% endif %})"
                                >R</a
                            >
                            {% endif %} {% if neuron.has_right and (neuron.has_left or neuron.has_middle) %}<span
                                class="soma-separator"
                                >, </span
                            >{% endif %} {% if neuron.has_left %}
                            <a
                                href="{{ neuron.left_url }}"
                                class="soma-link left"
                                title="View {{ neuron.name }} left side ({{ neuron.left_count }} {% if neuron.left_count == 1 %}cell{% else %}cells{% endif %})"
                                >L</a
                            >
                            {% endif %} {% if neuron.has_right and neuron.has_middle %}<span class="soma-separator"
                                >, </span
                            >{% endif %} {% if neuron.has_middle %}
                            <a
                                href="{{ neuron.middle_url }}"
                                class="soma-link middle"
                                title="View {{ neuron.name }} middle ({{ neuron.middle_count }} {% if neuron.middle_count == 1 %}cell{% else %}cells{% endif %})"
                                >M</a
                            >
                            {% endif %}
                            <span class="soma-label">)</span>
                            {% endif %}
                        </div>
                    </div>

                    <div class="card-info">
                        <div class="tag-list">
                            {% if neuron.parent_rois %}
                            {% for parent_roi in neuron.parent_rois %}
                            <span class="roi-tag parent-roi">{{ parent_roi }}</span>
                            {% endfor %}
                            {% endif %}

                            {% for roi in neuron.roi_summary %}
                            <span class="roi-tag">{{ roi.name | roi_abbr | safe }}</span>
                            {% endfor %}

                            {% if neuron.has_undefined %}
                            <span class="view-indicator undefined" title="Has neurons with unknown soma side">Undefined</span>
                            {% endif %}
                            {% if neuron.has_left and not neuron.has_right and not neuron.has_middle %}
                            <span class="view-indicator left" title="soma side left only">only L</span>
                            {% endif %}
                            {% if neuron.has_right and not neuron.has_left and not neuron.has_middle %}
                            <span class="view-indicator right" title="soma side right only">only R</span>
                            {% endif %}
                            {% if neuron.has_middle and not neuron.has_left and not neuron.has_right %}
                            <span class="view-indicator middle" title="soma side middle only">only M</span>
                            {% endif %}

                            {% if neuron.cell_superclass %}
                            <span class="class-tag superclass-tag">{{ neuron.cell_superclass }}</span>
                            {% endif %}

                            {% if neuron.cell_class %}
                            <span class="class-tag class-tag">{{ neuron.cell_class }}</span>
                            {% endif %}

                            {% if neuron.cell_subclass %}
                            <span class="class-tag subclass-tag">{{ neuron.cell_subclass }}</span>
                            {% endif %}

                            {% if neuron.consensus_nt %}
                            <span class="nt-tag">{{ neuron.consensus_nt }}</span>
                            {% elif neuron.celltype_predicted_nt %}
                            <span class="nt-tag">{{ neuron.celltype_predicted_nt }}</span>
                            {% endif %}

                            {% if neuron.dimorphism %}
                            <span class="dimorphism-tag">{{ neuron.dimorphism }}</span>
                            {% endif %}

                            {% if neuron.soma_neuromere %}
                            <span class="soma-neuromere-tag">{{ neuron.soma_neuromere }}</span>
                            {% endif %}

                            {% if neuron.truman_hl %}
                            <span class="truman-hl-tag">{{ neuron.truman_hl }}</span>
                            {% endif %}


                            {% if neuron.total_count and neuron.total_count > 0 %}
                            <span class="neuron-count-tag clickable-count" data-count="{{ neuron.total_count }}"
                                >{{ neuron.total_count }}</span
                            >
                            {% endif %}

                            {% if neuron.processed_synonyms %}
                                {% for syn_name, ref_list in neuron.processed_synonyms.items() %}
                                    {% if not syn_name.startswith('fru-M') %}
                                        <span class="synonym-tag" title="Synonym: {{ syn_name }}">{{ syn_name }}</span>
                                    {% endif %}
                                {% endfor %}
                            {% endif %}

                            {% if neuron.processed_flywire_types %}
                                {% for flywire_name, flywire_info in neuron.processed_flywire_types.items() %}
                                    {% if flywire_info.is_different %}
                                        <span class="flywire-type-tag" title="Flywire Type:{{ flywire_name }}">
                                            {{ flywire_name }}
                                        </span>
                                    {% endif %}
                                {% endfor %}
                            {% endif %}
                        </div>
                    </div>
                </div>
        </div>
        {% endfor %}
    </div>

    {# -- Hidden container for filtered out cards -- #}
    <div id="filtered-cards-container" style="display: none"></div>
</div>

{% endblock %}

{% block footer %}
{% include "sections/footer.html.jinja" %}
{% endblock %}

{% block extra_scripts %}
{# -- jQuery for search functionality -- #}
<script src="static/js/jquery-3.7.1.min.js"></script>

<script>
    {# Enhanced search functionality for the index page #}
    $(document).ready(function () {
        const nameFilter = $("#name-filter");
        const somaFilter = $("#soma-filter");
        const roiFilter = $("#roi-filter");
        const regionFilter = $("#region-filter");
        const ntFilter = $("#nt-filter");
        const cellCountFilter = $("#cell-count-filter");
        const superclassFilter = $("#superclass-filter");
        const classFilter = $("#class-filter");
        const subclassFilter = $("#subclass-filter");
        const dimorphismFilter = $("#dimorphism-filter");
        const somaNeuromereFilter = $("#soma-neuromere-filter");
        const trumanHlFilter = $("#truman-hl-filter");

        // Safety check for trumanHlFilter existence
        if (trumanHlFilter.length === 0) {
            console.warn("trumanHlFilter element not found - filter may not be available");
        }

        {# Virtual filters for tags that don't have dropdown selectors #}
        let currentSynonymFilter = "all";
        let currentFlywireTypeFilter = "all";

        const neuronCards = $(".neuron-card-wrapper");

        {#} Content area spinner functions #}
        function showContentSpinner(text = "Loading neuron types...") {
            $("#content-spinner .spinner-text").text(text);
            $("#content-spinner").show();
            $("#filtered-results-container").hide();
            $("#no-results-message").hide();
        }

        function hideContentSpinner() {
            $("#content-spinner").hide();
            $("#filtered-results-container").show();
        }

        {# Show spinner on page load #}
        showContentSpinner();

        {# Initialize the display on page load #}
        setTimeout(function () {
            rebuildFilteredView();
            hideContentSpinner();
        }, 100);

        {# Initialize highlighting on page load #}
        updateHighlighting();

        {# Add click handlers for ROI tags, NT tags, class tags, synonym tags, flywire tags, and view indicators using event delegation #}
        $(document).on(
            "click",
            ".roi-tag, .nt-tag, .class-tag, .dimorphism-tag, .soma-neuromere-tag, .truman-hl-tag, .synonym-tag, .flywire-type-tag, .view-indicator",
            function (e) {
                e.preventDefault();
                e.stopPropagation();

                const tagElement = $(this);
                const tagName = tagElement.text().trim();

                if (tagElement.hasClass("roi-tag")) {
                    if (tagElement.hasClass("parent-roi")) {
                        {# Parent ROI tag (should set region filter) #}
                        showContentSpinner("Filtering by region...");
                        const currentRegionFilter = regionFilter.val();

                        {# If clicking on the currently selected region, reset the filter #}
                        regionFilter.val(currentRegionFilter === tagName ? "all" : tagName);
                    } else {
                        {# Regular ROI tag (should set ROI filter) #}
                        showContentSpinner("Filtering by ROI...");
                        const currentRoiFilter = roiFilter.val();

                        {# If clicking on the currently selected ROI, reset the filter #}
                        roiFilter.val(currentRoiFilter === tagName ? "all" : tagName);
                    }
                } else if (tagElement.hasClass("nt-tag")) {
                    {# Neurotransmitter tag (should set NT filter) #}
                    showContentSpinner("Filtering by neurotransmitter...");
                    const currentNtFilter = ntFilter.val();

                    {# If clicking on the currently selected neurotransmitter, reset the filter #}
                    ntFilter.val(currentNtFilter === tagName ? "all" : tagName);
                } else if (tagElement.hasClass("class-tag")) {
                    {# Class tag (check which type and set appropriate filter) #}
                    showContentSpinner("Filtering by classification...");

                    if (tagElement.hasClass("superclass-tag")) {
                        const currentSuperclassFilter = superclassFilter.val();
                        superclassFilter.val(currentSuperclassFilter === tagName ? "all" : tagName);
                    } else if (tagElement.hasClass("subclass-tag")) {
                        const currentSubclassFilter = subclassFilter.val();
                        subclassFilter.val(currentSubclassFilter === tagName ? "all" : tagName);
                    } else {
                        {# Regular class tag #}
                        const currentClassFilter = classFilter.val();
                        classFilter.val(currentClassFilter === tagName ? "all" : tagName);
                    }
                } else if (tagElement.hasClass("dimorphism-tag")) {
                    {# Dimorphism tag (should set dimorphism filter) #}
                    showContentSpinner("Filtering by dimorphism...");
                    const currentDimorphismFilter = dimorphismFilter.val();

                    {# If clicking on the currently selected dimorphism, reset the filter #}
                    dimorphismFilter.val(currentDimorphismFilter === tagName ? "all" : tagName);
                } else if (tagElement.hasClass("soma-neuromere-tag")) {
                    {# Soma neuromere tag (should set soma neuromere filter) #}
                    showContentSpinner("Filtering by soma neuromere...");
                    const currentSomaNeuromereFilter = somaNeuromereFilter.val();

                    {# If clicking on the currently selected soma neuromere, reset the filter #}
                    somaNeuromereFilter.val(currentSomaNeuromereFilter === tagName ? "all" : tagName);
                } else if (tagElement.hasClass("truman-hl-tag")) {
                    {# Truman HL tag (should set truman hl filter) #}
                    if (trumanHlFilter.length) {
                        showContentSpinner("Filtering by truman hl...");
                        const currentTrumanHlFilter = trumanHlFilter.val();

                        {# If clicking on the currently selected truman hl, reset the filter #}
                        trumanHlFilter.val(currentTrumanHlFilter === tagName ? "all" : tagName);
                    }
                } else if (tagElement.hasClass("view-indicator")) {
                    showContentSpinner("Filtering by soma side...");
                    const currentSomaFilter = somaFilter.val();

                    {# Map display name to filter value #}
                    let somaValue;
                    if (tagName === "only L") {
                        somaValue = "left";
                    } else if (tagName === "only R") {
                        somaValue = "right";
                    } else if (tagName === "only M") {
                        somaValue = "middle";
                    } else if (tagName === "Undefined") {
                        somaValue = "undefined";
                    } else {
                        {# Fallback for any unexpected tag names #}
                        somaValue = tagName.toLowerCase();
                    }

                    {# If clicking on the currently selected soma side, reset the filter #}
                    somaFilter.val(currentSomaFilter === somaValue ? "all" : somaValue);
                } else if (tagElement.hasClass("synonym-tag")) {
                    {# Synonym tag (virtual filter)
                     Note: Any synonym tag can activate/deactivate the synonym filter
                     When active, shows all cards that have any synonyms #}
                    showContentSpinner("Filtering by synonyms...");

                    {# If any synonym filter is active, deactivate it; otherwise activate it #}
                    currentSynonymFilter = currentSynonymFilter !== "all" ? "all" : "synonyms-present";
                } else if (tagElement.hasClass("flywire-type-tag")) {
                    {# FlyWire type tag (virtual filter)
                     Note: Any FlyWire type tag can activate/deactivate the FlyWire type filter
                     When active, shows all cards that have any FlyWire types #}
                    showContentSpinner("Filtering by FlyWire types...");

                    {# If any flywire type filter is active, deactivate it; otherwise activate it #}
                    currentFlywireTypeFilter = currentFlywireTypeFilter !== "all" ? "all" : "flywire-types-present";
                }

                {# Apply filters and update highlighting #}
                setTimeout(function () {
                    applyFilters();

                    {# Scroll to the clicked card if it's still visible #}
                    const clickedCard = tagElement.closest(".neuron-card-wrapper");
                    setTimeout(function () {
                        if (clickedCard.length && clickedCard[0].scrollIntoView) {
                            clickedCard[0].scrollIntoView({ behavior: "smooth", block: "center" });
                        }
                    }, 100);
                }, 50);
            },
        );

        {# Function to update highlighting based on current filters #}
        function updateHighlighting() {
            const currentRoiFilter = roiFilter.val();
            const currentSomaFilter = somaFilter.val();
            const currentNtFilter = ntFilter.val();
            const currentCellCountFilter = cellCountFilter.val();
            const currentSuperclassFilter = superclassFilter.val();
            const currentClassFilter = classFilter.val();
            const currentSubclassFilter = subclassFilter.val();
            const currentDimorphismFilter = dimorphismFilter.val();
            const currentSomaNeuromereFilter = somaNeuromereFilter.val();
            const currentTrumanHlFilter = trumanHlFilter.length ? trumanHlFilter.val() : "all";

            {# Virtual filters don't have .val() since they're not dropdown elements #}
            const currentSynonymFilterValue = currentSynonymFilter;
            const currentFlywireTypeFilterValue = currentFlywireTypeFilter;


            {# Update ROI tag highlighting #}
            $("#filtered-results-container .roi-tag").removeClass("selected");
            $("#filtered-results-container .class-tag").removeClass("selected");
            if (currentRoiFilter !== "all") {
                $("#filtered-results-container .roi-tag:not(.parent-roi)").each(function () {
                    if ($(this).text().trim() === currentRoiFilter) {
                        $(this).addClass("selected");
                    }
                });
            }

            {# Update parent ROI (region) tag highlighting #}
            const currentRegionFilter = regionFilter.val();
            $("#filtered-results-container .roi-tag.parent-roi").removeClass("selected");
            if (currentRegionFilter !== "all") {
                $("#filtered-results-container .roi-tag.parent-roi").each(function () {
                    if ($(this).text().trim() === currentRegionFilter) {
                        $(this).addClass("selected");
                    }
                });
            }

            {# Update neurotransmitter tag highlighting #}
            $("#filtered-results-container .nt-tag").removeClass("selected");
            if (currentNtFilter !== "all") {
                $("#filtered-results-container .nt-tag").each(function () {
                    if ($(this).text().trim() === currentNtFilter) {
                        $(this).addClass("selected");
                    }
                });
            }

            {# Update cell count tag highlighting #}
            $("#filtered-results-container .neuron-count-tag").removeClass("selected");
            if (currentCellCountFilter !== "all") {
                const [rangeMin, rangeMax] = currentCellCountFilter.split("-").map((num) => parseInt(num));
                $("#filtered-results-container .neuron-count-tag").each(function () {
                    const cellCount = parseInt($(this).data("count"));
                    if (cellCount >= rangeMin && cellCount <= rangeMax) {
                        $(this).addClass("selected");
                    }
                });
            }

            {# Update view indicator highlighting #}
            $(".view-indicator").removeClass("selected");
            if (currentSomaFilter !== "all") {
                $(".view-indicator").each(function () {
                    const indicator = $(this);
                    const indicatorCard = indicator.closest(".neuron-card-wrapper");
                    const hasLeft = indicatorCard.find(".view-indicator.left").length > 0;
                    const hasRight = indicatorCard.find(".view-indicator.right").length > 0;
                    const hasMiddle = indicatorCard.find(".view-indicator.middle").length > 0;
                    const hasUndefined = indicatorCard.find(".view-indicator.undefined").length > 0;

                    const shouldHighlight =
                        (currentSomaFilter === "left" && indicator.hasClass("left")) ||
                        (currentSomaFilter === "right" && indicator.hasClass("right")) ||
                        (currentSomaFilter === "middle" && indicator.hasClass("middle")) ||
                        (currentSomaFilter === "undefined" && indicator.hasClass("undefined"));

                    shouldHighlight && indicator.addClass("selected");
                });
            }

            {# Highlight selected class tags #}
            if (currentSuperclassFilter !== "all") {
                $(".superclass-tag").each(function () {
                    if ($(this).text().trim() === currentSuperclassFilter) {
                        $(this).addClass("selected");
                    }
                });
            }

            if (currentClassFilter !== "all") {
                $(".class-tag:not(.superclass-tag):not(.subclass-tag)").each(function () {
                    if ($(this).text().trim() === currentClassFilter) {
                        $(this).addClass("selected");
                    }
                });
            }

            if (currentSubclassFilter !== "all") {
                $(".subclass-tag").each(function () {
                    if ($(this).text().trim() === currentSubclassFilter) {
                        $(this).addClass("selected");
                    }
                });
            }

            {# Update dimorphism tag highlighting #}
            $("#filtered-results-container .dimorphism-tag").removeClass("selected");
            if (currentDimorphismFilter !== "all") {
                $("#filtered-results-container .dimorphism-tag").each(function () {
                    if ($(this).text().trim() === currentDimorphismFilter) {
                        $(this).addClass("selected");
                    }
                });
            }

            {# Update soma neuromere tag highlighting #}
            $("#filtered-results-container .soma-neuromere-tag").removeClass("selected");
            if (currentSomaNeuromereFilter !== "all") {
                $("#filtered-results-container .soma-neuromere-tag").each(function () {
                    if ($(this).text().trim() === currentSomaNeuromereFilter) {
                        $(this).addClass("selected");
                    }
                });
            }

            {# Update truman hl tag highlighting #}
            if (trumanHlFilter.length) {
                $("#filtered-results-container .truman-hl-tag").removeClass("selected");
                if (currentTrumanHlFilter !== "all") {
                    $("#filtered-results-container .truman-hl-tag").each(function () {
                        if ($(this).text().trim() === currentTrumanHlFilter) {
                            $(this).addClass("selected");
                        }
                    });
                }
            }

            {# Update flywire type tag highlighting - highlight ALL flywire type tags when filter is active #}
            $("#filtered-results-container .flywire-type-tag").removeClass("selected");
            if (currentFlywireTypeFilterValue !== "all") {
                $("#filtered-results-container .flywire-type-tag").addClass("selected");
            }

            {# Update synonym tag highlighting - highlight ALL synonym tags when filter is active #}
            $("#filtered-results-container .synonym-tag").removeClass("selected");
            if (currentSynonymFilterValue !== "all") {
                $("#filtered-results-container .synonym-tag").addClass("selected");
            }
        }

        {# Add event handlers for dropdown changes and input fields #}
        nameFilter.on("input", function () {
            showContentSpinner("Filtering by name...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        {# Add clear button functionality for name filter #}
        $("#clear-name-filter").on("click", function () {
            nameFilter.val("");
            nameFilter.trigger("input");
            nameFilter.focus();
        });

        {# Show/hide clear button based on input content #}
        nameFilter.on("input", function () {
            const container = $(this).parent(".filter-input-container");
            const hasContent = $(this).val().trim() !== "";
            container.toggleClass("has-content", hasContent);
        });

        {# Initialize clear button visibility on page load #}
        nameFilter.parent(".filter-input-container").toggleClass("has-content", nameFilter.val().trim() !== "");

        {# Add keyboard support for name filter #}
        nameFilter.on("keydown", function (e) {
            if (e.key === "Escape") {
                $(this).val("");
                $(this).trigger("input");
            }
        });

        {# Bind filter events to rebuild the view and update highlighting #}
        somaFilter.on("change", function () {
            showContentSpinner("Filtering by soma side...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        roiFilter.on("change", function () {
            showContentSpinner("Filtering by ROI...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        regionFilter.on("change", function () {
            showContentSpinner("Filtering by region...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        ntFilter.on("change", function () {
            showContentSpinner("Filtering by neurotransmitter...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        cellCountFilter.on("change", function () {
            showContentSpinner("Filtering by cell count...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        superclassFilter.on("change", function () {
            showContentSpinner("Filtering by superclass...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        dimorphismFilter.on("change", function () {
            showContentSpinner("Filtering by dimorphism...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        classFilter.on("change", function () {
            showContentSpinner("Filtering by class...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        subclassFilter.on("change", function () {
            showContentSpinner("Filtering by subclass...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        somaNeuromereFilter.on("change", function () {
            showContentSpinner("Filtering by soma neuromere...");
            setTimeout(function () {
                applyFilters();
            }, 50);
        });

        if (trumanHlFilter.length) {
            trumanHlFilter.on("change", function () {
                showContentSpinner("Filtering by truman hl...");
                setTimeout(function () {
                    applyFilters();
                }, 50);
            });
        }

        {# Function to rebuild the filtered view by moving cards between containers #}
        function rebuildFilteredView() {
            const nameTerm = nameFilter.val().toLowerCase().trim();
            const selectedFilter = somaFilter.val();
            const selectedRoi = roiFilter.val();
            const selectedRegion = regionFilter.val();
            const selectedNt = ntFilter.val();
            const selectedCellCount = cellCountFilter.val();
            const selectedSuperclass = superclassFilter.val();
            const selectedClass = classFilter.val();
            const selectedSubclass = subclassFilter.val();
            const selectedDimorphism = dimorphismFilter.val();
            const selectedSomaNeuromere = somaNeuromereFilter.val();
            const selectedTrumanHl = trumanHlFilter.length ? trumanHlFilter.val() : "all";
            const selectedSynonym = currentSynonymFilter;
            const selectedFlywireType = currentFlywireTypeFilter;


            {# Clear the results container #}
            $("#filtered-results-container").empty();

            {# Collect all matching cards in flat list #}
            const matchingCards = [];
            let visibleCount = 0;
            const totalCount = neuronCards.length;

            {# Collect all matching cards #}
            neuronCards.each(function () {
                const cardWrapper = $(this);
                const card = cardWrapper.find(".neuron-card");
                const neuronName = card.find(".neuron-name-link, .neuron-name").text().toLowerCase();
                const availableViews = card.find(".view-indicator");
                const cardRois = cardWrapper.data("rois") ? cardWrapper.data("rois").split(",") : [];
                const parentRoi = cardWrapper.data("parent-roi");
                const region = cardWrapper.data("region");

                {# Check name filter - search neuron name, synonyms, and flywire types #}
                let matchesName = nameTerm === "";
                if (!matchesName && nameTerm !== "") {
                    {# Search in neuron name #}
                    matchesName = neuronName.includes(nameTerm);

                    {# Search in processed synonyms first (more accurate) #}
                    if (!matchesName) {
                        const processedSynonyms = cardWrapper.data("processed-synonyms") || "";
                        if (processedSynonyms) {
                            const synonymList = processedSynonyms
                                .toLowerCase()
                                .split(",")
                                .map((s) => s.trim());
                            matchesName = synonymList.some((synonym) => synonym.includes(nameTerm));
                        }
                    }

                    {# Fallback to raw synonyms if no processed synonyms available #}
                    if (!matchesName) {
                        const synonyms = cardWrapper.data("synonyms") || "";
                        if (synonyms) {
                            const synonymList = synonyms
                                .toLowerCase()
                                .split(";")
                                .map((s) => s.trim());
                            matchesName = synonymList.some((synonym) => {
                                {# Search in full synonym text #}
                                if (synonym.includes(nameTerm)) {
                                    return true;
                                }
                                {# Also search in just the part after colon (the actual name) #}
                                const colonIndex = synonym.indexOf(":");
                                if (colonIndex !== -1) {
                                    const nameAfterColon = synonym.substring(colonIndex + 1).trim();
                                    return nameAfterColon.includes(nameTerm);
                                }
                                return false;
                            });
                        }
                    }

                    {# Search in processed flywire types first (more accurate) #}
                    if (!matchesName) {
                        const processedFlywireTypes = cardWrapper.data("processed-flywire-types") || "";
                        if (processedFlywireTypes) {
                            const flywireTypeList = processedFlywireTypes
                                .toLowerCase()
                                .split(",")
                                .map((s) => s.trim());
                            matchesName = flywireTypeList.some((flywireType) => flywireType.includes(nameTerm));
                        }
                    }

                    {# Fallback to raw flywire types if no processed flywire types available #}
                    if (!matchesName) {
                        const flywireTypes = cardWrapper.data("flywire-types") || "";
                        if (flywireTypes) {
                            const flywireTypeList = flywireTypes
                                .toLowerCase()
                                .split(",")
                                .map((s) => s.trim());
                            matchesName = flywireTypeList.some((flywireType) => flywireType.includes(nameTerm));
                        }
                    }
                }

                {# Check soma side filter - use function to avoid variable reassignment in if statements #}
                const matchesFilter = (() => {
                    if (selectedFilter === "all") return true;

                    const leftCount = parseInt(cardWrapper.data("left-count")) || 0;
                    const rightCount = parseInt(cardWrapper.data("right-count")) || 0;
                    const middleCount = parseInt(cardWrapper.data("middle-count")) || 0;
                    const undefinedCount = parseInt(cardWrapper.data("undefined-count")) || 0;

                    const hasLeft = leftCount > 0;
                    const hasRight = rightCount > 0;
                    const hasMiddle = middleCount > 0;
                    const hasUndefined = undefinedCount > 0;

                    const filterChecks = {
                        undefined: hasUndefined,
                        left: hasLeft && !hasRight && !hasMiddle,
                        right: hasRight && !hasLeft && !hasMiddle,
                        middle: hasMiddle && !hasLeft && !hasRight,
                    };

                    return filterChecks[selectedFilter] || false;
                })();

                {# Check ROI filter #}
                const parentRois = parentRoi && parentRoi.trim() ? parentRoi.split(",").map(s => s.trim()).filter(s => s) : [];
                const matchesRoi =
                    selectedRoi === "all" || cardRois.includes(selectedRoi) || parentRois.includes(selectedRoi);

                {# Check region filter #}
                const regions = region && region.trim() ? region.split(",").map(s => s.trim()).filter(s => s) : [];
                const matchesRegion = selectedRegion === "all" || regions.includes(selectedRegion);

                {# Check neurotransmitter filter #}
                const matchesNt = selectedNt === "all" || cardWrapper.data("nt") === selectedNt;

                {# Check superclass filter #}
                const matchesSuperclass =
                    selectedSuperclass === "all" || cardWrapper.data("superclass") === selectedSuperclass;

                {# Check class filter #}
                const matchesClass = selectedClass === "all" || cardWrapper.data("class") === selectedClass;

                {# Check subclass filter #}
                const matchesSubclass = selectedSubclass === "all" || cardWrapper.data("subclass") === selectedSubclass;

                {# Check dimorphism filter #}
                const matchesDimorphism =
                    selectedDimorphism === "all" || cardWrapper.data("dimorphism") === selectedDimorphism;

                {# Check soma neuromere filter #}
                const matchesSomaNeuromere =
                    selectedSomaNeuromere === "all" || cardWrapper.data("soma-neuromere") === selectedSomaNeuromere;

                {# Check truman hl filter #}
                const matchesTrumanHl =
                    selectedTrumanHl === "all" || cardWrapper.data("truman-hl") === selectedTrumanHl;

                {# Check cell count filter #}
                const matchesCellCount = (() => {
                    if (selectedCellCount === "all") return true;
                    const cardCellCount = parseInt(cardWrapper.data("cell-count")) || 0;
                    const [rangeMin, rangeMax] = selectedCellCount.split("-").map((num) => parseInt(num));
                    return cardCellCount >= rangeMin && cardCellCount <= rangeMax;
                })();

                {# Check synonym filter #}
                const matchesSynonym = (() => {
                    if (selectedSynonym === "all") return true;

                    const synonyms = cardWrapper.data("synonyms") || "";
                    const processedSynonyms = cardWrapper.data("processed-synonyms") || "";

                    if (selectedSynonym === "synonyms-present") {
                        return synonyms !== "" || processedSynonyms !== "";
                    } else if (selectedSynonym === "synonyms-absent") {
                        return synonyms === "" && processedSynonyms === "";
                    }

                    return false;
                })();

                {# Check flywire type filter #}
                const matchesFlywireType = (() => {
                    if (selectedFlywireType === "all") return true;

                    const flywireTypes = cardWrapper.data("flywire-types") || "";
                    const processedFlywireTypes = cardWrapper.data("processed-flywire-types") || "";

                    if (selectedFlywireType === "flywire-types-present") {
                        {# Check if card has flywire types that are different from the neuron name #}
                        {# Only check processed flywire types - these contain only displayable (different) types #}
                        return processedFlywireTypes !== "";
                    } else if (selectedFlywireType === "flywire-types-absent") {
                        {# Check if card has no displayable flywire types #}
                        return processedFlywireTypes === "";
                    } else if (selectedFlywireType === "flywire-types-detailed") {
                        {# Only show cards with displayable flywire types for detailed view #}
                        return processedFlywireTypes !== "";
                    }

                    return false;
                })();



                {# If card matches all filters, add to matching cards #}
                if (
                    matchesName &&
                    matchesFilter &&
                    matchesRoi &&
                    matchesRegion &&
                    matchesNt &&
                    matchesCellCount &&
                    matchesSuperclass &&
                    matchesClass &&
                    matchesSubclass &&
                    matchesDimorphism &&
                    matchesSomaNeuromere &&
                    matchesTrumanHl &&
                    matchesSynonym &&
                    matchesFlywireType
                ) {
                    matchingCards.push(cardWrapper);
                    visibleCount++;
                }
            });

            {# Build the filtered results as flat list #}
            const resultsContainer = $("#filtered-results-container");

            if (matchingCards.length > 0) {
                {# Create row for cards #}
                const rowDiv = $('<div class="row"></div>');

                {# Add all matching cards to row #}
                matchingCards.forEach(function (cardWrapper) {
                    const clonedCard = cardWrapper.clone();
                    clonedCard.show(); {# Ensure cloned cards are visible #}
                    rowDiv.append(clonedCard);
                });

                resultsContainer.append(rowDiv);
            }

            {# Show/hide no results message and update count #}
            const hasResults = visibleCount > 0;
            $("#no-results-message").toggle(!hasResults);

            const resultText = hasResults
                ? visibleCount === totalCount
                    ? "Showing all " + totalCount + " types"
                    : visibleCount + " of " + totalCount + " types shown"
                : "0 of " + totalCount + " types shown";
            $("#result-count").text(resultText);
        }

        function applyFilters() {
            rebuildFilteredView();
            setTimeout(function () {
                updateHighlighting();
                hideContentSpinner();
                {# Reinitialize tooltips after filtering #}
                initializeTitleTooltips();
            }, 100);
        }

        {# Add window resize handler for redrawing #}
        let resizeTimeout;
        $(window).on("resize", function () {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function () {
                showContentSpinner("Redrawing layout...");
                setTimeout(function () {
                    applyFilters();
                    updateHighlighting();
                }, 50);
            }, 250); {# Debounce resize events #}
        });

        {# Add click handler for cell count tags to activate/deactivate filter #}
        $(document).on("click", ".clickable-count", function (e) {
            e.preventDefault();
            const cellCount = parseInt($(this).data("count"));

            {# Find the appropriate range for this cell count #}
            const cellCountFilter = $("#cell-count-filter");
            const currentFilter = cellCountFilter.val();
            const options = cellCountFilter.find("option");

            for (let i = 1; i < options.length; i++) {
                {# Skip "All Counts" option #}
                const optionValue = $(options[i]).val();
                const [rangeMin, rangeMax] = optionValue.split("-").map((num) => parseInt(num));

                if (cellCount >= rangeMin && cellCount <= rangeMax) {
                    {# Toggle behavior: if this range is already selected, deactivate it #}
                    cellCountFilter.val(currentFilter === optionValue ? "all" : optionValue);
                    cellCountFilter.trigger("change");
                    break;
                }
            }
        });

        {# Initialize count display #}
        applyFilters();

        {# Title attribute tooltip functionality (similar to abbr tooltips) #}
        function initializeTitleTooltips() {
            {# Create tooltip element if it doesn't exist #}
            var tooltip = document.getElementById("title-tooltip");
            if (!tooltip) {
                tooltip = document.createElement("div");
                tooltip.id = "title-tooltip";
                tooltip.style.position = "absolute";
                tooltip.style.backgroundColor = "#999";
                tooltip.style.color = "white";
                tooltip.style.padding = "5px 10px";
                tooltip.style.borderRadius = "4px";
                tooltip.style.fontSize = "14px";
                tooltip.style.pointerEvents = "none";
                tooltip.style.zIndex = "9999";
                tooltip.style.display = "none";
                tooltip.style.maxWidth = "200px";
                tooltip.style.wordWrap = "break-word";
                document.body.appendChild(tooltip);
            }

            {# Find all elements with title attributes and add tooltip functionality #}
            document.querySelectorAll("[title]").forEach(function (element) {
                var tooltipText = element.getAttribute("title");
                if (tooltipText && !element._titleTooltipInitialized) {
                    {# Mark as initialized to prevent duplicates #}
                    element._titleTooltipInitialized = true;

                    element.addEventListener("mouseenter", function (e) {
                        {# Temporarily remove title to suppress default browser tooltip #}
                        var currentTitle = element.getAttribute("title");
                        element.removeAttribute("title");

                        {# Show custom tooltip #}
                        tooltip.textContent = currentTitle;
                        tooltip.style.display = "block";

                        {# Position tooltip near mouse #}
                        var updateTooltipPosition = function (event) {
                            var x = event.clientX + window.scrollX;
                            var y = event.clientY + window.scrollY;
                            tooltip.style.left = x + 20 + "px";
                            tooltip.style.top = y - 10 + "px";
                        };

                        updateTooltipPosition(e);

                        {# Follow mouse movement #}
                        var mouseMoveHandler = updateTooltipPosition;
                        document.addEventListener("mousemove", mouseMoveHandler);

                        {# Store cleanup function #}
                        element._titleTooltipCleanup = function () {
                            document.removeEventListener("mousemove", mouseMoveHandler);
                        };
                    });

                    element.addEventListener("mouseleave", function () {
                        {# Restore title attribute #}
                        element.setAttribute("title", tooltipText);

                        {# Hide custom tooltip #}
                        tooltip.style.display = "none";

                        {# Clean up mouse move listener #}
                        if (element._titleTooltipCleanup) {
                            element._titleTooltipCleanup();
                            delete element._titleTooltipCleanup;
                        }
                    });
                }
            });
        }

        {# Add reset filters functionality #}
        $("#filter-form").on("reset", function () {
            showContentSpinner("Resetting filters...");

            {# Reset virtual filters (form reset handles the actual form elements) #}
            currentSynonymFilter = "all";
            currentFlywireTypeFilter = "all";


            setTimeout(function () {
                rebuildFilteredView();
                updateHighlighting();
                hideContentSpinner();
            }, 100);
        });

        {# Initialize tooltips #}
        initializeTitleTooltips();
    });
</script>
{% endblock %}
